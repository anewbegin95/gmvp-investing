"""
Last update: 2023-03-30


"""
# Import necessary libraries
import pandas as pd
import numpy as np
import yfinance as yf
import statsmodels.api as sm
from scipy.optimize import minimize
import requests
from bs4 import BeautifulSoup

# Specify key variables
etf_url = 'https://investor.vanguard.com/etf/list#/etf/asset-class/month-end-returns'
ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_5_Factors_2x3_CSV.zip'
px_data_start_date = '2015-01-01'
px_data_end_date = '2022-03-30'

"""
Create a list of Vanguard ETF vanguard_etfs

This section of the code scrapes the Vanguard ETF list page and extracts the ticker symbols for
all Vanguard ETFs. The resulting list vanguard_etfs contains the ticker symbols for all Vanguard
ETFs as of the current date. Note that this list may change over time as new ETFs are added and
old ones are retired.
"""
html_content = requests.get(etf_url).text
soup = BeautifulSoup(html_content, "html.parser")

# Extract the table containing ETFs
table = soup.find("table")

# Extract the rows from the table
rows = table.tbody.find_all("tr")

# Create an empty list to store the ETFs
vanguard_etfs = []

# Loop through the rows and extract the ETF ticker symbol
for row in rows:
    columns = row.find_all("td")
    ticker = columns[0].text.strip()
    vanguard_etfs.append(ticker)

# Print the list of Vanguard ETFs
print(vanguard_etfs)

# Download historical price data for each of those vanguard_etfs
portfolio_data = pd.DataFrame()

for ticker in vanguard_etfs:
    data = yf.download(ticker, start=px_data_start_date, end=px_data_end_date)
    data['Ticker'] = ticker
    portfolio_data = pd.concat([portfolio_data, data])

# Convert historical prices into percent change from previous day
portfolio_data['Returns'] = portfolio_data.groupby(
    'Ticker')['Adj Close'].pct_change()
portfolio_data = portfolio_data.dropna()

# Download Fama French Five Factors Data, cleanse it, and convert it into decimals
ff_data = pd.read_csv(ff_url, skiprows=3)
ff_data = ff_data.rename(columns={'Unnamed: 0': 'Date'})
ff_data = ff_data.iloc[:-1, :]
ff_data['Date'] = pd.to_datetime(ff_data['Date'], format='%Y%m')
ff_data = ff_data.set_index('Date')
ff_data = ff_data / 100

"""
Convert percent change in historical prices for each ETF into to percent excess returns by
subtracting the risk free rate for the period
"""
portfolio_data['Excess Returns'] = portfolio_data['Returns'] - \
    ff_data.loc[portfolio_data.index, 'RF'].values

"""
Run multivariable regression with percent excess returns for each ETF as the independent variable
and with the fama french five factors as the dependent variable
"""
X = ff_data.loc[portfolio_data.index, ['Mkt-RF', 'SMB', 'HML', 'RMW', 'CMA']]
Y = portfolio_data.groupby(
    'Ticker')['Excess Returns'].apply(list).apply(pd.Series)
Y.columns = range(1, 1+len(Y.columns))
coefficients = pd.DataFrame(index=Y.columns, columns=X.columns)

for i in range(len(Y.columns)):
    model = sm.OLS(Y.iloc[:, i], X).fit()
    coefficients.iloc[i, :] = model.params

coefficients = coefficients.astype(float)

"""
Calculate Cost of Equity using average of each coefficient times each unique coefficient plus
an annualized risk free return rate
"""
risk_free_rate = ff_data['RF'].mean() * 12
coe = (coefficients * coefficients.mean()).sum(axis=1) + risk_free_rate

"""
Create a covariance table with excess return percentages for each ETF versus excess return
percentages for every other ETF
"""
covariance_table = pd.DataFrame(index=vanguard_etfs, columns=vanguard_etfs)

for i in range(len(vanguard_etfs)):
    for j in range(len(vanguard_etfs)):
        if i == j:
            covariance_table.iloc[i, j] = portfolio_data.loc[portfolio_data['Ticker']
                == vanguard_etfs[i], 'Excess Returns'].var()
        else:
            returns_i = portfolio_data.loc[portfolio_data]












# fileDir = os.path.abspath(os.path.dirname(sys.argv[0]))
# parentDir = os.path.dirname(fileDir)
# gparentDir = os.path.dirname(parentDir)

# print(fileDir)
# print(parentDir)
# print(gparentDir)

# # %% Step 2: Read in ticker config file - list of vanguard_etfs
# filepath = r'data/001-vanguard_etf_list/cln/etf_list.csv'
# filename = os.path.join(fileDir, filepath)

# colnames = ['ticker', 'name', 'asset_class', 'subclass']
# data = pd.read_csv(filename, names=colnames, encoding='ISO-8859-1')

# vanguard_etfs = data.ticker.tolist()
# del vanguard_etfs[0]

# print(vanguard_etfs[1:10])
# print(filename)
# print(data)
# print(vanguard_etfs)

# # %% Step 3: Build ticker dictionary
# dt1 = "20110131"
# dt2 = "20190531"
# ticker_dict = {"Date": pd.date_range(start=dt1, end=dt2, freq='M')[::-1],
#                "A": vanguard_etfs
#                }
# adjCloseDict = dict.fromkeys(vanguard_etfs)
# # print(ticker_dict)
# print(adjCloseDict)

# # %% Step 4: Download data and zip to dictionary

# for ticker in vanguard_etfs[0:10]:
#     url = r'https://stooq.com/q/d/l/?s=%s.us&d1=%s&d2=%s&i=m&o=1100000' \
#            % (ticker, dt1, dt2)

#     urlReq = requests.get(url).content
#     urlData = pd.read_csv(io.StringIO(urlReq.decode('utf-8')))

#     urlCloseList = urlData['Close'].tolist()

# #    print(urlCloseList[0:5])

# #    for key in adjCloseDict.keys():
# #        if ticker != key:
# #            next
# #        else:
#     adjCloseDict[ticker] = urlCloseList
# %%
# print(adjCloseDict)
# %% Next steps
# # %%Convert data in adjusted close frame to % change from previous time period
#     # Convert each list to a pandas data series
#     # Iterate over each series using .pct_change() to get % difference
#     # Reverse order of list (?)

# # Bring Fama French Factor Data into a dataframe
# # Cleanse FF5F data and convert to decimals
# # Convert % change to % excess return using RF rate for period
# # Append a single Int column with "1" val
# # Run multivariable regression against each adj close colum w/ adj close as Y and FF5F as X
# # Calculate Cost of Equity using avg of each coeff * each unique coeff + rfr (annualized)
# # Create covariance table of each adj return column vs every other adj return column
# # Optimize portfolio extected risk/return using COE and changes in # of share investments in securities
