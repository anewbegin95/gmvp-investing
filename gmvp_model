"""
Last update: 2023-03-30


"""
# Import necessary libraries
import pandas as pd
import numpy as np
import yfinance as yf
import statsmodels.api as sm
from scipy.optimize import minimize
import pytz

# Specify key variables
ff_url = 'https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_5_Factors_2x3_CSV.zip'
px_data_start_date = pd.Timestamp('2015-01-01', tz='UTC')  # Set UTC timezone
px_data_end_date = pd.Timestamp('2023-03-30', tz='UTC')  # Set UTC timezone
# Set the desired timezone
tz = pytz.timezone('US/Eastern')

# Provide a list of tickers manually
# vanguard_etfs = ['VAESX', 'VBIAX', 'VBILX', 'VBIPX', 'VBIRX', 'VBITX', 'VBK', 'VBTLX', 'VCADX', 'VCIT', 'VCLT', 'VCORX', 'VCSH', 'VCVSX', 'VEA', 'VEGA', 'VEGI', 'VEGN', 'VEU', 'VFIDX', 'VFIIX', 'VFIJX', 'VFITX', 'VFMFX', 'VFTAX', 'VGHCX', 'VGHAX', 'VGIT', 'VGK', 'VGLT', 'VGRAX', 'VGSLX', 'VGSTX', 'VGT', 'VGTSX', 'VGWAX', 'VGZ', 'VHCIX', 'VHCOX', 'VHGEX', 'VHIAX', 'VHYAX', 'VIHIX', 'VIMSX', 'VINEX', 'VINIX', 'VINRX', 'VISGX', 'VITAX', 'VITLX', 'VITSX', 'VIVAX', 'VIVIX', 'VLAAX', 'VLACX', 'VLGIX', 'VLISX', 'VLSCX', 'VLT', 'VLTCX', 'VMBS', 'VMGMX', 'VMIAX', 'VMNFX', 'VMNVX', 'VMO', 'VMOT', 'VMVAX', 'VNQ', 'VNQI', 'VNYTX', 'VOE', 'VOO', 'VOOG', 'VOOV', 'VOT', 'VPMSX', 'VSMAX', 'VSPSX', 'VTABX', 'VTEAX', 'VTRIX', 'VTSAX', 'VTSAX', 'VTSIX', 'VTSMX', 'VTWAX', 'VTWNX', 'VV', 'VVIAX', 'VWINX', 'VWITX', 'VWIUX']
vanguard_etfs = ['VAESX', 'VBIAX', 'VBILX', 'VBIPX', 'VBIRX', 'VBITX', 'VBK', 'VBTLX']

# Download historical price data for each of those vanguard_etfs
portfolio_data = pd.DataFrame()
for ticker in vanguard_etfs:
    ticker_obj = yf.Ticker(ticker)
    data = ticker_obj.history(start=px_data_start_date, end=px_data_end_date, interval="1d")
    data['Ticker'] = ticker
    data = data.resample('MS').first()  # Resample data to first day of each month
    portfolio_data = pd.concat([portfolio_data, data])

# Convert historical prices into percent change from previous day
portfolio_data = portfolio_data.reset_index()
portfolio_data['Date'] = pd.to_datetime(portfolio_data['Date']).dt.date
portfolio_data = portfolio_data.rename(columns={'Close': 'Adj Close'})
portfolio_data['Pct Return'] = portfolio_data.groupby(
    'Ticker')['Adj Close'].pct_change()
portfolio_data = portfolio_data.dropna()

print(portfolio_data.dtypes)
print(portfolio_data.head())

# Download Fama French Five Factors Data, cleanse it, and convert it into decimals
try:
    ff_data = pd.read_csv(ff_url, skiprows=3, error_bad_lines=False)
except:
    ff_data = pd.read_csv(ff_url, skiprows=3)
ff_data = ff_data.rename(columns={'Unnamed: 0': 'Date'})
ff_data['Date'] = pd.to_datetime(ff_data['Date'], format='%Y%m', errors='coerce')
ff_data = ff_data.set_index('Date')
ff_data = ff_data.apply(pd.to_numeric, errors='coerce')

print(ff_data.head())

# Merge portfolio_data and ff_data on date index
merged_data = pd.merge(portfolio_data, ff_data, left_index=True, right_index=True, how='inner')

"""
Convert percent change in historical prices for each ETF into to percent excess returns by
subtracting the risk free rate for the period
"""
portfolio_data['Excess Returns'] = portfolio_data['Returns'] - \
    ff_data.loc[portfolio_data.index, 'RF'].values

"""
Run multivariable regression with percent excess returns for each ETF as the independent variable
and with the fama french five factors as the dependent variable
"""
X = ff_data.loc[portfolio_data.index, ['Mkt-RF', 'SMB', 'HML', 'RMW', 'CMA']]
Y = portfolio_data.groupby(
    'Ticker')['Excess Returns'].apply(list).apply(pd.Series)
Y.columns = range(1, 1+len(Y.columns))
coefficients = pd.DataFrame(index=Y.columns, columns=X.columns)

for i in range(len(Y.columns)):
    model = sm.OLS(Y.iloc[:, i], X).fit()
    coefficients.iloc[i, :] = model.params

coefficients = coefficients.astype(float)

"""
Calculate Cost of Equity using average of each coefficient times each unique coefficient plus
an annualized risk free return rate
"""
risk_free_rate = ff_data['RF'].mean() * 12
coe = (coefficients * coefficients.mean()).sum(axis=1) + risk_free_rate

"""
Create a covariance table with excess return percentages for each ETF versus excess return
percentages for every other ETF
"""
covariance_table = pd.DataFrame(index=vanguard_etfs, columns=vanguard_etfs)

for i in range(len(vanguard_etfs)):
    for j in range(len(vanguard_etfs)):
        if i == j:
            covariance_table.iloc[i, j] = portfolio_data.loc[portfolio_data['Ticker']
                == vanguard_etfs[i], 'Excess Returns'].var()
        else:
            returns_i = portfolio_data.loc[portfolio_data]